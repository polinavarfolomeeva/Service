import re
from datetime import datetime
from aiogram.types import Message
from loguru import logger

def format_message(message, message_type="info"):

    emoji_dict = {
        "success": "‚úÖ",
        "info": "‚ÑπÔ∏è",
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå"
    }
    emoji = emoji_dict.get(message_type, "‚ÑπÔ∏è")

    return f"{emoji} {message}"

def get_main_menu_text(user_name):

    return (
        f"<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üåü</b>\n\n"
        f"–Ø –±–æ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ \"–ê–≤—Ç–æ–ú–∞—Å—Ç–µ—Ä\". –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        f"‚Ä¢ üöó <b>–ù–∞–π—Ç–∏</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        f"‚Ä¢ üîß <b>–£–∑–Ω–∞–≤–∞—Ç—å</b> –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        f"‚Ä¢ üì± <b>–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è</b> –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ üë§ <b>–£–ø—Ä–∞–≤–ª—è—Ç—å</b> —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã\n\n"
        f"<i>–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –≤—ã! ‚úÖ</i>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )

def format_price(price):
    try:
        price_str = f"{float(price):,.2f}".replace(",", " ")

        if price_str.endswith(".00"):
            price_str = price_str[:-3]
        return f"{price_str} ‚ÇΩ"
    except (ValueError, TypeError):
        return "–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

def format_orders_list(orders: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not orders:
        return "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç"
    
    result = ""
    for i, order in enumerate(orders, 1):
        order_number = order.get("number", "–±/–Ω")
        date_str = order.get("date", "")
        status = order.get("status", "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞")
        amount = order.get("amount", 0)
        client_name = order.get("client", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        client_phone = order.get("client", {}).get("phone", "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        if date_str:
            try:
                date = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
                date_str = date.strftime("%d.%m.%Y %H:%M")
            except Exception:
                pass
        
        result += (
            f"{i}. <b>–ó–∞–∫–∞–∑ ‚Ññ{order_number}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    return result

def format_order_details(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    order_number = order.get("number", "–±/–Ω")
    date_str = order.get("date", "")
    status = order.get("status", "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞")
    amount = order.get("amount", 0)
    comment = order.get("comment", "")
    client_name = order.get("client", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    client_phone = order.get("client", {}).get("phone", "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
    if date_str:
        try:
            date = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            date_str = date.strftime("%d.%m.%Y %H:%M")
        except Exception:
            pass
    
    result = (
        f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order_number}</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client_phone}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount} —Ä—É–±.\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
    )
    
    if comment:
        result += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
    
    items = order.get("items", [])
    if items:
        result += "\n<b>–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
        for i, item in enumerate(items, 1):
            item_name = item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
            quantity = item.get("quantity", 1)
            price = item.get("price", 0)
            item_amount = item.get("amount", 0)
            
            result += (
                f"{i}. {item_name}\n"
                f"   –ö–æ–ª-–≤–æ: {quantity} √ó {price} = {item_amount} —Ä—É–±.\n"
            )
    
    return result

def format_service_orders_list(orders: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –°–¢–û –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not orders:
        return "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –°–¢–û –ø—É—Å—Ç"
    
    result = ""
    for i, order in enumerate(orders, 1):
        order_number = order.get("number", "–±/–Ω")
        date_str = order.get("date", "")
        status = order.get("status", "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞")
        amount = order.get("amount", 0)
        client_name = order.get("client", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        car = order.get("car", "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        if date_str:
            try:
                date = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
                date_str = date.strftime("%d.%m.%Y %H:%M")
            except Exception:
                pass
        
        result += (
            f"{i}. <b>–ó–∞–∫–∞–∑ –°–¢–û ‚Ññ{order_number}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    return result

def format_service_order_details(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –°–¢–û"""
    order_number = order.get("number", "–±/–Ω")
    date_str = order.get("date", "")
    status = order.get("status", "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞")
    amount = order.get("amount", 0)
    comment = order.get("comment", "")
    client_name = order.get("client", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")    
    client_phone = order.get("client", {}).get("phone", "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    car = order.get("car", "–ù–µ —É–∫–∞–∑–∞–Ω")
    start_date_str = order.get("start_date", "")
    end_date_str = order.get("end_date", "")
    
    mechanic_raw = order.get("mechanic", "")
    if not mechanic_raw or mechanic_raw == "<>":
        mechanic = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    else:
        mechanic = mechanic_raw.replace("<", "&lt;").replace(">", "&gt;")
    
    date_format = "%d.%m.%Y %H:%M"
    if date_str:
        try:
            date = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            date_str = date.strftime(date_format)
        except Exception:
            pass
    
    if start_date_str:
        try:
            start_date = datetime.fromisoformat(start_date_str.replace("Z", "+00:00"))
            start_date_str = start_date.strftime(date_format)
        except Exception:
            pass
    
    if end_date_str:
        try:
            end_date = datetime.fromisoformat(end_date_str.replace("Z", "+00:00"))
            end_date_str = end_date.strftime(date_format)
        except Exception:
            pass
    
    result = (
        f"<b>–ó–∞–∫–∞–∑ –°–¢–û ‚Ññ{order_number}</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {date_str}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client_phone}\n"
        f"üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {car}\n"
        f"üïí <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å:</b> {start_date_str}\n"
        f"üïí <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–æ:</b> {end_date_str}\n"
        f"üë®‚Äçüîß <b>–ú–µ—Ö–∞–Ω–∏–∫:</b> {mechanic}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount} —Ä—É–±.\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
    )
    
    if comment:
        result += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
    
    items = order.get("items", [])
    if items:
        result += "\n<b>–ó–∞–ø—á–∞—Å—Ç–∏ –∏ —É—Å–ª—É–≥–∏:</b>\n"
        for i, item in enumerate(items, 1):
            item_name = item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
            quantity = item.get("quantity", 1)
            price = item.get("price", 0)
            item_amount = item.get("amount", 0)
            
            result += (
                f"{i}. {item_name}\n"
                f"   –ö–æ–ª-–≤–æ: {quantity} √ó {price} = {item_amount} —Ä—É–±.\n"
            )
    return result

def validate_phone(phone):

    pattern = r'^\+7\d{10}$'
    return bool(re.match(pattern, phone))

def validate_email(email):

    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

def format_date(date_str, input_format="%Y-%m-%dT%H:%M:%S", output_format="%d.%m.%Y %H:%M"):

    try:
        date_obj = datetime.strptime(date_str, input_format)
        return date_obj.strftime(output_format)
    except (ValueError, TypeError):
        return "–î–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

def format_product_info(product):

    if not product:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    if isinstance(product, dict) and "product" in product:
        product = product["product"]

    name = product.get("name", product.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))

    price_value = product.get("price", product.get("–¶–µ–Ω–∞", 0))
    price = format_price(price_value)

    description = product.get("description", product.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))

    stock = product.get("stock", product.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–∞–°–∫–ª–∞–¥–µ", 0))
    category = product.get("category_name", product.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""))
    supplier = product.get("supplier", product.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""))
    in_stock = "–í –Ω–∞–ª–∏—á–∏–∏" if product.get("in_stock", product.get("–í–ù–∞–ª–∏—á–∏–∏", False)) else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

    text = f"<b>{name}</b>\n\n"
    text += f"<b>–¶–µ–Ω–∞:</b> {price}\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {in_stock}\n"
    text += f"<b>–ù–∞–ª–∏—á–∏–µ:</b> {stock} —à—Ç.\n"

    if category:
        text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"

    if supplier:
        text += f"<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier}\n"

    text += f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n"

    return text

def format_service_info(service):

    if not service:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    name = service.get("name", service.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    price = format_price(service.get("price", service.get("–¶–µ–Ω–∞", 0)))
    description = service.get("description", service.get("–û–ø–∏—Å–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))

    duration = service.get("execution_time", service.get("duration", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"))

    duration_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    if duration and duration != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
        duration_text = f"{duration}"

    text = f"<b>{name}</b>\n\n"
    text += f"<b>–¶–µ–Ω–∞:</b> {price}\n"
    text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_text} –º–∏–Ω.\n\n"
    text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n"

    return text

def format_support_info():
    return """
üìû <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (495) 123-45-67  
<b>Telegram:</b> @autoservice_support  

üïí –†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00
"""