from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from app.services.api_service import api_service
from app.keyboards.staff_keyboards import (
    get_staff_main_menu, 
    get_orders_list_keyboard, 
    get_order_actions_keyboard,
    get_status_change_keyboard
)
from app.utils.formatting import format_order_details, format_orders_list

router = Router()

class StaffAuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

user_auth_data = {}

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    if message.from_user.id in user_auth_data:
        user_auth_data.pop(message.from_user.id)
    
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞!\n\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    await message.answer(welcome_text)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(StaffAuthStates.waiting_for_login)

@router.message(StaffAuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
    login = message.text.strip()
    
    user_auth_data[message.from_user.id] = {
        "login": login,
        "messages_to_delete": [message.message_id]
    }
    
    password_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    user_auth_data[message.from_user.id]["messages_to_delete"].append(password_msg.message_id)
    
    await state.set_state(StaffAuthStates.waiting_for_password)

@router.message(StaffAuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    user_id = message.from_user.id
    password = message.text.strip()
    
    if user_id not in user_auth_data:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    user_auth_data[user_id]["messages_to_delete"].append(message.message_id)
    login = user_auth_data[user_id]["login"]
    
    auth_successful = True
    
    if auth_successful:
        for msg_id in user_auth_data[user_id]["messages_to_delete"]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, {login}!",
            reply_markup=get_staff_main_menu()
        )
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        await state.clear()

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
    await message.answer(help_text)

@router.callback_query(F.data == "show_orders")
async def show_orders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    await callback.answer()
    
    response = await api_service._make_request("GET", "/orders")
    
    if response.get("status") == 200 and "orders" in response.get("data", {}):
        orders = response["data"]["orders"]
        
        if not orders:
            await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
            return
        
        orders_text = format_orders_list(orders)
        
        keyboard = get_orders_list_keyboard(orders)
        
        await callback.message.answer(
            f"üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n{orders_text}", 
            reply_markup=keyboard
        )
    else:
        error_msg = response.get("data", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {error_msg}")

@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_number = callback.data.split("_")[1]
    await callback.answer()
    
    response = await api_service._make_request("GET", f"/orders/by-number/{order_number}")
    
    if response.get("status") == 200 and "order" in response.get("data", {}):
        order = response["data"]["order"]
        
        order_text = format_order_details(order)
        
        keyboard = get_order_actions_keyboard(order_number)
        
        await callback.message.answer(
            f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_number}:</b>\n\n{order_text}", 
            reply_markup=keyboard
        )
    else:
        error_msg = response.get("data", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {error_msg}")

@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_number = callback.data.split("_")[2]
    await callback.answer()
    
    statuses_response = await api_service.get_order_statuses()
    
    if statuses_response.get("status") == 200 and "statuses" in statuses_response.get("data", {}):
        statuses = statuses_response["data"]["statuses"]
        
        status_response = await api_service.get_order_status(order_number)
        
        if status_response.get("status") == 200:
            current_status = status_response["data"]["status"]
            current_status_name = next((s["name"] for s in statuses if s["id"] == current_status), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            keyboard = get_status_change_keyboard(order_number, statuses)
            
            await callback.message.answer(
                f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_number}</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{current_status_name}</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:",
                reply_markup=keyboard
            )
        else:
            error_msg = status_response.get("data", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {error_msg}")
    else:
        error_msg = statuses_response.get("data", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {error_msg}")

@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    parts = callback.data.split("_")
    order_number = parts[2]
    new_status = parts[3]
    
    response = await api_service.update_order_status(order_number, new_status)
    
    if response.get("status") == 200:
        updated_status = response["data"]["status"]
        updated_at = response["data"]["updated_at"]
        
        statuses_response = await api_service.get_order_statuses()
        if statuses_response.get("status") == 200 and "statuses" in statuses_response.get("data", {}):
            statuses = statuses_response["data"]["statuses"]
            status_name = next((s["name"] for s in statuses if s["id"] == updated_status), updated_status)
            
            await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}")
            await callback.message.answer(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_number} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{status_name}</b>\n"
                f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_at}"
            )
            
            new_callback_data = f"order_{order_number}"
            callback.data = new_callback_data
            await show_order_details(callback)
        else:
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {updated_status}")
    else:
        error_msg = response.get("data", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {error_msg}")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        reply_markup=get_staff_main_menu()
    )

staff_router = router
