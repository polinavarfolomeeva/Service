from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from app.keyboards.keyboards import get_main_menu, get_auth_menu, get_cancel_keyboard, get_profile_keyboard
from app.keyboards.register_keyboards import get_contact_keyboard, get_login_choice_keyboard
from app.services.api_service import api_service
from app.utils.formatting import format_message, get_main_menu_text
from app.utils.auth import validate_phone, validate_email, format_phone_for_api

router = Router()

user_auth_cache = {}

class AuthStates(StatesGroup):

    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_login_choice = State()
    waiting_for_manual_login = State()
    waiting_for_register_password = State()  

    def __init__(self):
        super().__init__()
        self.messages_to_delete = []

@router.callback_query(F.data == "profile")
async def process_profile(callback: CallbackQuery):

    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    
    is_authenticated = user_auth_cache.get(user_id, False)

    if is_authenticated:
        text = (
            f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, {user_name}!\n\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        )
        await callback.message.edit_text(
            text,
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
    else:
        text = (
            f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            f"<i>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.</i>"
        )
        await callback.message.edit_text(
            text,
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data == "login")
async def process_login(callback: CallbackQuery, state: FSMContext):

    await state.update_data(auth_messages_to_delete=[])

    await state.set_state(AuthStates.waiting_for_login)

    sent_message = await callback.message.edit_text(
        "<b>üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (email):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    user_data = await state.get_data()
    auth_messages_to_delete = user_data.get("auth_messages_to_delete", [])
    auth_messages_to_delete.append(sent_message.message_id)
    await state.update_data(auth_messages_to_delete=auth_messages_to_delete)

    await callback.answer()

@router.message(AuthStates.waiting_for_login)
async def process_login_input(message: Message, state: FSMContext):

    await state.update_data(login=message.text)

    user_data = await state.get_data()
    auth_messages_to_delete = user_data.get("auth_messages_to_delete", [])
    auth_messages_to_delete.append(message.message_id)

    await state.set_state(AuthStates.waiting_for_password)

    sent_message = await message.answer(
        "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    auth_messages_to_delete.append(sent_message.message_id)
    await state.update_data(auth_messages_to_delete=auth_messages_to_delete)

@router.message(AuthStates.waiting_for_password)
async def process_password_input(message: Message, state: FSMContext):

    await state.update_data(password=message.text)

    user_data = await state.get_data()
    auth_messages_to_delete = user_data.get("auth_messages_to_delete", [])
    auth_messages_to_delete.append(message.message_id)
    await state.update_data(auth_messages_to_delete=auth_messages_to_delete)

    data = await state.get_data()
    login = data.get("login")
    password = data.get("password")

    response = await api_service.login_user({"login": login, "password": password})

    auth_messages_to_delete = data.get("auth_messages_to_delete", [])

    if response.get("status") == 200 and response.get("data", {}).get("user", {}):
        user_id = message.from_user.id
        user_auth_cache[user_id] = True
        
        for msg_id in auth_messages_to_delete:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        try:
            await message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")

        user_data = response.get("data", {}).get("user", {})
        user_name = user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        greeting_text = get_main_menu_text(user_name)

        await message.answer(
            greeting_text,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        if isinstance(response.get("data"), dict) and response.get("data", {}).get("message"):
            error_message = response.get("data", {}).get("message")
        elif response.get("status") != 200:
            error_message = f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥ {response.get('status')})"
        else:
            error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"

        await message.answer(
            format_message(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_message}", "error"),
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )

    await state.clear()

@router.callback_query(F.data == "logout")
async def process_logout(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    response = await api_service.logout_user()

    if response.get("status") == 200:
        user_auth_cache.pop(user_id, None)
        
        await callback.message.edit_text(
            format_message("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "success"),
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            format_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "error"),
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()

    if current_state:
        await state.clear()

    await callback.message.edit_text(
        "<b>‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n\n"
        "<i>–ß–µ–º –µ—â—ë –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?</i>",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):

    user_name = callback.from_user.first_name
    greeting_text = get_main_menu_text(user_name)

    await callback.message.edit_text(
        greeting_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

    await callback.answer()

#
@router.callback_query(F.data == "register")
async def process_register(callback: CallbackQuery, state: FSMContext):

    await state.update_data(messages_to_delete=[])

    await state.set_state(AuthStates.waiting_for_name)

    sent_message = await callback.message.edit_text(
        "<b>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    await callback.answer()

@router.message(AuthStates.waiting_for_name)
async def process_name_input(message: Message, state: FSMContext):

    await state.update_data(name=message.text)

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)

    await state.set_state(AuthStates.waiting_for_phone)

    sent_message = await message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_contact_keyboard(),
        parse_mode="HTML"
    )

    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.message(AuthStates.waiting_for_phone, F.contact)
async def process_contact_input(message: Message, state: FSMContext):

    phone = message.contact.phone_number

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    if not validate_phone(phone):
        sent_message = await message.answer(
            format_message("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "warning"),
            reply_markup=get_contact_keyboard(),
            parse_mode="HTML"
        )

        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return

    formatted_phone = format_phone_for_api(phone)

    await state.update_data(phone=phone, formatted_phone=formatted_phone)

    await state.set_state(AuthStates.waiting_for_email)

    sent_message = await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.message(AuthStates.waiting_for_phone)
async def process_manual_phone_input(message: Message, state: FSMContext):

    phone = message.text

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    if not validate_phone(phone):
        sent_message = await message.answer(
            format_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", "warning"),
            reply_markup=get_contact_keyboard(),
            parse_mode="HTML"
        )

        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return

    formatted_phone = format_phone_for_api(phone)

    await state.update_data(phone=phone, formatted_phone=formatted_phone)

    await state.set_state(AuthStates.waiting_for_email)

    sent_message = await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.message(AuthStates.waiting_for_email)
async def process_email_input(message: Message, state: FSMContext):

    email = message.text

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    if not validate_email(email):
        sent_message = await message.answer(
            format_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.", "warning"),
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return

    await state.update_data(email=email)

    await state.set_state(AuthStates.waiting_for_login_choice)

    sent_message = await message.answer(
        "üîë –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π email –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ª–æ–≥–∏–Ω–∞?",
        reply_markup=get_login_choice_keyboard(),
        parse_mode="HTML"
    )

    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.callback_query(F.data == "use_email_as_login", AuthStates.waiting_for_login_choice)
async def process_use_email_as_login(callback: CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    email = user_data.get("email", "")

    messages_to_delete = user_data.get("messages_to_delete", [])
    if callback.message and callback.message.message_id:
        messages_to_delete.append(callback.message.message_id)

    await state.update_data(login=email, messages_to_delete=messages_to_delete)

    await state.set_state(AuthStates.waiting_for_register_password)

    sent_message = await callback.message.edit_text(
        f"‚úÖ Email <b>{email}</b> –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ª–æ–≥–∏–Ω.\n\n"
        "üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    if sent_message and sent_message.message_id:
        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

    await callback.answer()

@router.callback_query(F.data == "manual_login", AuthStates.waiting_for_login_choice)
async def process_manual_login(callback: CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    if callback.message and callback.message.message_id:
        messages_to_delete.append(callback.message.message_id)

    await state.set_state(AuthStates.waiting_for_manual_login)

    sent_message = await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    if sent_message and sent_message.message_id:
        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)

    await callback.answer()

@router.message(AuthStates.waiting_for_manual_login)
async def process_manual_login_input(message: Message, state: FSMContext):

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    if len(message.text) < 3:
        sent_message = await message.answer(
            format_message("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "warning"),
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )

        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return

    await state.update_data(login=message.text)

    await state.set_state(AuthStates.waiting_for_register_password)

    sent_message = await message.answer(
        "üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )

    messages_to_delete.append(sent_message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

@router.message(AuthStates.waiting_for_register_password)
async def process_password_for_register(message: Message, state: FSMContext):

    user_data = await state.get_data()
    messages_to_delete = user_data.get("messages_to_delete", [])
    messages_to_delete.append(message.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)

    if len(message.text) < 6:
        sent_message = await message.answer(
            format_message("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "warning"),
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )

        messages_to_delete.append(sent_message.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return

    await state.update_data(password=message.text)

    user_data = await state.get_data()

    name = user_data.get("name", "")
    phone = user_data.get("phone", "")
    email = user_data.get("email", "")
    login = user_data.get("login", "")

    register_data = {
        "name": name,
        "phone": user_data.get("formatted_phone", format_phone_for_api(phone)),
        "email": email,
        "login": login,
        "password": user_data.get("password", "")
    }

    if not validate_phone(phone):
        await message.answer(
            format_message("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", "error"),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()
        return

    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {register_data}")
    logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: /auth/register")
    response = await api_service.register_user(register_data)

    messages_to_delete = user_data.get("messages_to_delete", [])

    if response.get("status") in [200, 201]:

        for msg_id in messages_to_delete:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        try:
            await message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")

        await state.clear()

        user_data_from_api = response.get("data", {}).get("user", {})

        await message.answer(
            f"<b>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"üë§ –§–ò–û: <b>{user_data_from_api.get('name', name)}</b>\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>+7{user_data_from_api.get('phone', phone)}</b>\n"
            f"üìß Email: <b>{user_data_from_api.get('email', email)}</b>\n"
            f"üîë –õ–æ–≥–∏–Ω: <b>{user_data_from_api.get('username', login)}</b>\n\n"
            f"<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</i>",
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )
    else:

        if isinstance(response.get("data"), dict):
            error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        else:
            error_message = f"–û—à–∏–±–∫–∞ (–∫–æ–¥ {response.get('status')}): {response.get('data', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        await message.answer(
            format_message(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_message}", "error"),
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )

        await state.clear()

@router.callback_query(F.data == "logout")
async def process_logout(callback: CallbackQuery):

    response = await api_service.logout_user()

    if response.get("status") == 200:

        await callback.message.edit_text(
            format_message("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "success"),
            reply_markup=get_auth_menu(),
            parse_mode="HTML"
        )
    else:

        await callback.message.edit_text(
            format_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "error"),
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()

    if current_state:
        await state.clear()

    await callback.message.edit_text(
        "<b>‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n\n"
        "<i>–ß–µ–º –µ—â—ë –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?</i>",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):

    user_name = callback.from_user.first_name
    greeting_text = get_main_menu_text(user_name)

    await callback.message.edit_text(
        greeting_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

    await callback.answer()