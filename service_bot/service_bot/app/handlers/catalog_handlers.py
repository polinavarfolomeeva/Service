from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import math

from app.keyboards.keyboards import (
    get_main_menu, get_products_keyboard, get_services_keyboard, 
    get_product_detail_keyboard, get_service_detail_keyboard, 
    get_categories_keyboard
)
from app.services.api_service import api_service
from app.utils.formatting import format_message, format_product_info, format_service_info

router = Router()

ITEMS_PER_PAGE = 10  

@router.callback_query(F.data == "catalog_products")
async def process_catalog_products(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        "<b>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤...</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None,
        parse_mode="HTML"
    )

    response = await api_service.get_products()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (products): {response}")

    if response.get("status") == 200 and "data" in response:

        products_data = response.get("data", [])

        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_data}")

        if isinstance(products_data, dict) and 'products' in products_data:
            products = products_data.get('products', [])
        else:
            products = products_data

        formatted_products = []

        if isinstance(products, list):
            for product in products:
                if isinstance(product, dict):

                    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in product:
                        product_id = product.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "")
                        if isinstance(product_id, dict) and "id" in product_id:
                            product_id = product_id.get("id", "")
                            
                        category = product.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                        if isinstance(category, dict) and "id" in category:
                            category = category.get("id", "")
                            
                        formatted_products.append({
                            "id": product_id,
                            "code": product.get("–ö–æ–¥", ""), 
                            "name": product.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¢–æ–≤–∞—Ä"),
                            "price": product.get("–¶–µ–Ω–∞", "–ü–æ –∑–∞–ø—Ä–æ—Å—É"),
                            "description": product.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                            "stock": product.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–∞–°–∫–ª–∞–¥–µ", 0),
                            "category": category,
                            "category_name": product.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
                        })
                    else:

                        if "code" not in product and "id" in product:
                            product["code"] = product["id"]  
                        formatted_products.append(product)
                elif isinstance(product, str):

                    formatted_products.append({
                        "id": product, 
                        "name": product, 
                        "price": "–ü–æ –∑–∞–ø—Ä–æ—Å—É",
                        "code": product  
                    })
                else:

                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: {type(product)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {product}")

        if formatted_products:

            await state.update_data(
                products=formatted_products,
                current_page=1,
                total_pages=math.ceil(len(formatted_products) / ITEMS_PER_PAGE)
            )

            await show_products_page(callback, state, 1)
        else:
            await callback.message.edit_text(
                "<b>üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
    else:
        error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        await callback.message.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n{error_message}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

    await callback.answer()

async def show_products_page(callback: CallbackQuery, state: FSMContext, page: int):

    state_data = await state.get_data()
    products = state_data.get("products", [])
    total_pages = state_data.get("total_pages", 1)

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    await state.update_data(current_page=page)

    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(products))

    current_page_items = products[start_idx:end_idx]

    text = (
        "<b>üõí –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤</b>\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
    )

    if total_pages > 1:
        text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

    await callback.message.edit_text(
        text,
        reply_markup=get_products_keyboard(current_page_items, page, total_pages),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("products_page_"))
async def process_products_pagination(callback: CallbackQuery, state: FSMContext):

    page = int(callback.data.split("_")[-1])

    await show_products_page(callback, state, page)
    await callback.answer()

@router.callback_query(F.data == "catalog_services")
async def process_catalog_services(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        "<b>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥...</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None,
        parse_mode="HTML"
    )

    response = await api_service.get_services()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (services): {response}")

    if response.get("status") == 200 and "data" in response:

        services_data = response.get("data", [])

        logger.debug(f"–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥: {services_data}")

        if isinstance(services_data, dict) and 'services' in services_data:
            services = services_data.get('services', [])
        else:
            services = services_data

        formatted_services = []

        if isinstance(services, list):
            for service in services:
                if isinstance(service, dict):

                    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in service:                        
                        service_id = service.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "")
                        if isinstance(service_id, dict) and "id" in service_id:
                            service_id = service_id.get("id", "")
                            
                        formatted_services.append({
                            "id": service_id,
                            "code": service.get("–ö–æ–¥", ""), 
                            "name": service.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–£—Å–ª—É–≥–∞"),
                            "price": service.get("–¶–µ–Ω–∞", "–ü–æ –∑–∞–ø—Ä–æ—Å—É"),
                            "description": service.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                            "duration": service.get("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0)
                        })
                    else:

                        if "code" not in service and "id" in service:
                            service["code"] = service["id"]  
                        formatted_services.append(service)
                elif isinstance(service, str):

                    formatted_services.append({
                        "id": service, 
                        "name": service, 
                        "price": "–ü–æ –∑–∞–ø—Ä–æ—Å—É",
                        "code": service  
                    })
                else:

                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏: {type(service)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {service}")

        if formatted_services:

            await state.update_data(
                services=formatted_services,
                current_services_page=1,
                total_services_pages=math.ceil(len(formatted_services) / ITEMS_PER_PAGE)
            )

            await show_services_page(callback, state, 1)
        else:
            await callback.message.edit_text(
                "<b>üòî –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –ø—É—Å—Ç</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
    else:
        error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥")
        await callback.message.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n{error_message}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

    await callback.answer()

async def show_services_page(callback: CallbackQuery, state: FSMContext, page: int):

    state_data = await state.get_data()
    services = state_data.get("services", [])
    total_pages = state_data.get("total_services_pages", 1)

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    await state.update_data(current_services_page=page)

    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(services))

    current_page_items = services[start_idx:end_idx]

    text = (
        "<b>üîß –£—Å–ª—É–≥–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ —Ä–µ–º–æ–Ω—Ç—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n"
        "–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–º–µ—é—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
    )

    if total_pages > 1:
        text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

    await callback.message.edit_text(
        text,
        reply_markup=get_services_keyboard(current_page_items, page, total_pages),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("services_page_"))
async def process_services_pagination(callback: CallbackQuery, state: FSMContext):

    page = int(callback.data.split("_")[-1])

    await show_services_page(callback, state, page)
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def process_product_detail(callback: CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_")[1]

    state_data = await state.get_data()
    all_products = state_data.get("products", []) + state_data.get("category_products", [])

    selected_product = next((p for p in all_products if p.get("id") == product_id), None)

    product_code = ""
    if selected_product:
        product_code = selected_product.get("code", selected_product.get("–ö–æ–¥", ""))
        
        if not product_code:
            product_code = selected_product.get("id", selected_product.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", ""))
            if isinstance(product_code, dict) and "id" in product_code:
                product_code = product_code.get("id", "")

    if not product_code:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...",
        reply_markup=None
    )

    response = await api_service.get_product_by_id(product_code)
    logger.debug(f"–û—Ç–≤–µ—Ç API –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_code}: —Å—Ç–∞—Ç—É—Å {response.get('status')}")

    if response.get("status") == 200 and "data" in response:
        product = response.get("data", {})

        if isinstance(product, dict) and "product" in product:
            product = product["product"]

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {product}")

        if product:

            product_info = format_product_info(product)

            await callback.message.edit_text(
                product_info,
                reply_markup=get_product_detail_keyboard(product_id),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_products_keyboard(),
                parse_mode="HTML"
            )
    else:
        error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {product_code}: {error_message}")
        await callback.message.edit_text(
            format_message(error_message, "error"),
            reply_markup=get_products_keyboard(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data == "back_to_products")
async def process_back_to_products(callback: CallbackQuery, state: FSMContext):

    await process_catalog_products(callback, state)
    await callback.answer()

@router.callback_query(F.data.startswith("service_"))
async def process_service_detail(callback: CallbackQuery, state: FSMContext):
    service_id = callback.data.split("_")[1]

    state_data = await state.get_data()
    all_services = state_data.get("services", [])
    selected_service = next((s for s in all_services if s.get("id") == service_id), None)

    service_code = ""
    if selected_service:
        service_code = selected_service.get("code", selected_service.get("–ö–æ–¥", ""))
        
        if not service_code:
            service_code = selected_service.get("id", selected_service.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", ""))
            if isinstance(service_code, dict) and "id" in service_code:
                service_code = service_code.get("id", "")

    if not service_code:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ —É—Å–ª—É–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ...",
        reply_markup=None
    )

    response = await api_service.get_service_by_id(service_code)

    if response.get("status") == 200 and "data" in response:

        data = response.get("data", {})
        service = data.get("service", data)  

        if service:

            logger.debug(f"–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {service}")

            service_info = format_service_info(service)

            await callback.message.edit_text(
                service_info,
                reply_markup=get_service_detail_keyboard(service_id),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_services_keyboard(),
                parse_mode="HTML"
            )
    else:
        error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ")
        await callback.message.edit_text(
            format_message(error_message, "error"),
            reply_markup=get_services_keyboard(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data == "back_to_services")
async def process_back_to_services(callback: CallbackQuery, state: FSMContext):

    await process_catalog_services(callback, state)
    await callback.answer()

@router.callback_query(F.data == "catalog_categories")
async def process_catalog_categories(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        "<b>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None,
        parse_mode="HTML"
    )

    response = await api_service.get_categories()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (categories): {response}")

    if response.get("status") == 200 and "data" in response:

        categories_data = response.get("data", [])

        logger.debug(f"–î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_data}")

        formatted_categories = []
        
        if isinstance(categories_data, dict) and 'categories' in categories_data:
            categories_list = categories_data.get('categories', [])

            for category in categories_list:
                if isinstance(category, dict):
                    category_id = category.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", category.get("–ö–æ–¥", ""))
                    
                    if isinstance(category_id, dict) and "id" in category_id:
                        category_id = category_id.get("id", "")
                        
                    formatted_categories.append({
                        "id": category_id,
                        "name": category.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                        "description": category.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                        "code": category.get("–ö–æ–¥", "")
                    })
                elif isinstance(category, str):
                    formatted_categories.append({"id": category, "name": category})        
        elif isinstance(categories_data, list):
            for category in categories_data:
                if isinstance(category, dict):
                    if "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" in category:
                        category_id = category.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", category.get("–ö–æ–¥", ""))
                        
                        if isinstance(category_id, dict) and "id" in category_id:
                            category_id = category_id.get("id", "")
                            
                        formatted_categories.append({
                            "id": category_id,
                            "name": category.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                            "description": category.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                            "code": category.get("–ö–æ–¥", "")
                        })
                    else:
                        formatted_categories.append(category)
                elif isinstance(category, str):

                    formatted_categories.append({"id": category, "name": category})
                else:

                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {type(category)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {category}")

        logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {formatted_categories}")

        if formatted_categories:

            await state.update_data(
                categories=formatted_categories,
                current_categories_page=1,
                total_categories_pages=math.ceil(len(formatted_categories) / ITEMS_PER_PAGE)
            )

            await show_categories_page(callback, state, 1)
        else:
            await callback.message.edit_text(
                "<b>üòî –ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
    else:
        error_message = response.get("data", {}).get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        await callback.message.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n{error_message}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )

    await callback.answer()

async def show_categories_page(callback: CallbackQuery, state: FSMContext, page: int):

    state_data = await state.get_data()
    categories = state_data.get("categories", [])
    total_pages = state_data.get("total_categories_pages", 1)

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    await state.update_data(current_categories_page=page)

    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(categories))

    current_page_items = categories[start_idx:end_idx]

    text = (
        "<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )

    if total_pages > 1:
        text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

    await callback.message.edit_text(
        text,
        reply_markup=get_categories_keyboard(current_page_items, page, total_pages),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("categories_page_"))
async def process_categories_pagination(callback: CallbackQuery, state: FSMContext):

    page = int(callback.data.split("_")[-1])

    await show_categories_page(callback, state, page)
    await callback.answer()

@router.callback_query(F.data.startswith("category_"))
async def process_category_products(callback: CallbackQuery, state: FSMContext):

    category_id = callback.data.split("_")[1]
    logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID: {category_id}")

    state_data = await state.get_data()
    all_categories = state_data.get("categories", [])
    logger.debug(f"–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {all_categories}")
    
    selected_category = next((cat for cat in all_categories if cat.get("id") == category_id), {"name": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"})
    logger.debug(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}")
    
    category_name = selected_category.get("name", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    await callback.message.edit_text(
        f"<b>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\"...</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=None,
        parse_mode="HTML"
    )
    await state.update_data(selected_category=selected_category)
    
    category_code = ""
    
    if selected_category:
        category_code = selected_category.get("code", "")
        if not category_code:
            category_code = selected_category.get("–ö–æ–¥", "")
        
        if not category_code:
            category_code = category_id
    
    logger.debug(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞: {category_code}")

    if not category_code:
        await callback.message.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\".\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    response = await api_service.get_category_by_id(category_code)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (category by ID): {response}")

    products_data = []

    if response.get("status") == 200 and "data" in response and isinstance(response["data"], dict):
        category_data = response["data"]

        if "products" in category_data and isinstance(category_data["products"], list):
            products_data = category_data["products"]

    if not products_data:
        response = await api_service.get_products_by_category(category_code)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (products by category): {response}")

        if response.get("status") == 200 and "data" in response:

            products_data = response.get("data", [])

    logger.debug(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {products_data}")

    if isinstance(products_data, dict) and 'products' in products_data:
        products = products_data.get('products', [])
    else:
        products = products_data

    formatted_products = []    
    if isinstance(products, list):
        for product in products:
            if isinstance(product, dict):
                if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in product:
                    product_id = product.get("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "")
                    if isinstance(product_id, dict) and "id" in product_id:
                        product_id = product_id.get("id", "")
                        
                    category = product.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                    if isinstance(category, dict) and "id" in category:
                        category = category.get("id", "")

                    formatted_products.append({
                        "id": product_id,
                        "code": product.get("–ö–æ–¥", ""),
                        "name": product.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¢–æ–≤–∞—Ä"),
                        "price": product.get("–¶–µ–Ω–∞", "–ü–æ –∑–∞–ø—Ä–æ—Å—É"),
                        "description": product.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                        "stock": product.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ù–∞–°–∫–ª–∞–¥–µ", 0),
                        "category": category,
                        "category_name": product.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
                    })
                else:
                    formatted_products.append(product)
            elif isinstance(product, str):
                formatted_products.append({"id": product, "name": product, "price": "–ü–æ –∑–∞–ø—Ä–æ—Å—É"})

    if formatted_products:

        await state.update_data(
            category_products=formatted_products,
            current_category_page=1,
            total_category_pages=math.ceil(len(formatted_products) / ITEMS_PER_PAGE)
        )

        await show_category_products_page(callback, state, 1)
    else:
        await callback.message.edit_text(
            f"<b>üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\" –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_categories_keyboard(all_categories, 1, math.ceil(len(all_categories) / ITEMS_PER_PAGE)),
            parse_mode="HTML"
        )

    await callback.answer()

async def show_category_products_page(callback: CallbackQuery, state: FSMContext, page: int):

    state_data = await state.get_data()
    products = state_data.get("category_products", [])
    total_pages = state_data.get("total_category_pages", 1)
    selected_category = state_data.get("selected_category", {"name": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"})
    category_name = selected_category.get("name", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    await state.update_data(current_category_page=page)

    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(products))

    current_page_items = products[start_idx:end_idx]

    text = (
        f"<b>üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )

    if total_pages > 1:
        text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

    builder = InlineKeyboardBuilder()

    for product in current_page_items:
        name = product.get('name', '–¢–æ–≤–∞—Ä')
        price = product.get('price', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')
        product_id = product.get('id', '')

        price_text = f"{price}‚ÇΩ" if isinstance(price, (int, float)) else price

        builder.row(
            InlineKeyboardButton(
                text=f"{name} - {price_text}",
                callback_data=f"product_{product_id}"
            )
        )

    if total_pages > 1:
        pagination_buttons = []

        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"category_products_page_{page - 1}"
                )
            )

        pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{page} –∏–∑ {total_pages}",
                callback_data="category_products_current_page"
            )
        )

        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"category_products_page_{page + 1}"
                )
            )

        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("category_products_page_"))
async def process_category_products_pagination(callback: CallbackQuery, state: FSMContext):

    page = int(callback.data.split("_")[-1])

    await show_category_products_page(callback, state, page)
    await callback.answer()

@router.callback_query(F.data == "back_to_categories")
async def process_back_to_categories(callback: CallbackQuery, state: FSMContext):

    state_data = await state.get_data()
    categories = state_data.get("categories", [])
    current_page = state_data.get("current_categories_page", 1)
    total_pages = state_data.get("total_categories_pages", 1)

    if current_page < 1:
        current_page = 1
    elif current_page > total_pages:
        current_page = total_pages

    start_idx = (current_page - 1) * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(categories))

    current_page_items = categories[start_idx:end_idx]

    text = (
        "<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )

    if total_pages > 1:
        text += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"

    await callback.message.edit_text(
        text,
        reply_markup=get_categories_keyboard(current_page_items, current_page, total_pages),
        parse_mode="HTML"
    )

    await callback.answer()
