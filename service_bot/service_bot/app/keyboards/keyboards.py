from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

def get_main_menu() -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog_categories"),
        InlineKeyboardButton(text="üõí –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="catalog_products"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üîß –£—Å–ª—É–≥–∏", callback_data="catalog_services"),
        InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about"),
        width=1
    )

    return builder.as_markup()

def get_auth_menu() -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üîë –í–æ–π—Ç–∏", callback_data="login"),
        InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_catalog_menu(categories=None) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    if categories:
        for cat in categories:
            builder.row(
                InlineKeyboardButton(
                    text=cat.get("name", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                    callback_data=f"category_{cat.get('id')}"
                )
            )

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_products_keyboard(products=None, current_page=1, total_pages=1) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    if products:
        for product in products:

            if not isinstance(product, dict):

                continue

            name = product.get('name', '–¢–æ–≤–∞—Ä')
            if not name and '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in product:
                name = product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¢–æ–≤–∞—Ä')

            price = product.get('price', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')
            if not price and '–¶–µ–Ω–∞' in product:
                price = product.get('–¶–µ–Ω–∞', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')

            product_id = product.get('id', '')
            if not product_id and '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' in product:
                product_id = product.get('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '')

            if not product_id:
                continue

            price_text = f"{price}‚ÇΩ" if isinstance(price, (int, float)) else price

            builder.row(
                InlineKeyboardButton(
                    text=f"{name} - {price_text}",
                    callback_data=f"product_{product_id}"
                )
            )

    if total_pages > 1:
        pagination_buttons = []

        if current_page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"products_page_{current_page - 1}"
                )
            )

        pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page} –∏–∑ {total_pages}",
                callback_data="products_current_page"
            )
        )

        if current_page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"products_page_{current_page + 1}"
                )
            )

        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_services_keyboard(services=None, current_page=1, total_pages=1) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    if services:
        for service in services:

            if not isinstance(service, dict):

                continue

            name = service.get('name', '–£—Å–ª—É–≥–∞')
            if not name and '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in service:
                name = service.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–£—Å–ª—É–≥–∞')

            price = service.get('price', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')
            if not price and '–¶–µ–Ω–∞' in service:
                price = service.get('–¶–µ–Ω–∞', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')

            service_id = service.get('id', '')
            if not service_id and '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' in service:
                service_id = service.get('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '')

            if not service_id:
                continue

            price_text = f"{price}‚ÇΩ" if isinstance(price, (int, float)) else price

            builder.row(
                InlineKeyboardButton(
                    text=f"{name} - {price_text}",
                    callback_data=f"service_{service_id}"
                )
            )

    if total_pages > 1:
        pagination_buttons = []

        if current_page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"services_page_{current_page - 1}"
                )
            )

        pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page} –∏–∑ {total_pages}",
                callback_data="services_current_page"
            )
        )

        if current_page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"services_page_{current_page + 1}"
                )
            )

        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_categories_keyboard(categories=None, current_page=1, total_pages=1) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    if categories:
        for category in categories:

            if not isinstance(category, dict):

                continue

            name = category.get('name', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
            if not name and '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in category:
                name = category.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')

            category_id = category.get('id', '')
            if not category_id and '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' in category:
                category_id = category.get('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '')

            if not category_id:
                continue

            builder.row(
                InlineKeyboardButton(
                    text=f"üìÅ {name}",
                    callback_data=f"category_{category_id}"
                )
            )

    if total_pages > 1:
        pagination_buttons = []

        if current_page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"categories_page_{current_page - 1}"
                )
            )

        pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page} –∏–∑ {total_pages}",
                callback_data="categories_current_page"
            )
        )

        if current_page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"categories_page_{current_page + 1}"
                )
            )

        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(text="üõí –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="catalog_products"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_product_detail_keyboard(product_id) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_products"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_service_detail_keyboard(service_id) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_service_{service_id}"),
        width=1
    )

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        width=1
    )

    return builder.as_markup()

def get_auth_menu() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîë –í–æ–π—Ç–∏", callback_data="login"),
            InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
        ],
        [
            InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

def get_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="order_history"),
            InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="promotions")
        ],
        [
            InlineKeyboardButton(text="üöó –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="my_cars"),
            #InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="logout")
        ],
        [
            #InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="logout")
        ],
        [
            InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

def get_cancel_keyboard() -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_auth"),
        width=1
    )

    return builder.as_markup()

def get_back_button():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )